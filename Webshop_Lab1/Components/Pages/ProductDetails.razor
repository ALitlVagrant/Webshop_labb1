@page "/productdetails/{id:int}"
@using Webshop_Lab1.Models
@inject WebshopApi webshopApi
@inject ILocalStorageService localStorage
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="css/ProductDetails.css" />
</head>

<h3> Produktdetaljer</h3>

@if (product != null)
{
    <div>
        <h4>@product.Name</h4>
        <p>@product.Description</p>
        <p><strong>Pris:</strong> @product.Price kr</p>
        <img src="@product.ImageUrl" alt="@product.Name" width="200" />

        <br /><br />
        <button @onclick="AddToCart" style="background-color: @(isAddedToCart ? "#28a745" : "#b30000");">
             Lägg till i varukorg
        </button>
        
        @foreach (var message in confirmationMessages)
        {
            <p class="text-success">@message</p>
        }
    </div>

    <br />
    <a href="/">← Tillbaka till produkter</a>
}
else
{
    <p>⏳ Laddar produktdetaljer...</p>
}


@code {
    [Parameter] public int id { get; set; }
    private Product product;

    private List<string> confirmationMessages = new List<string>();
    private bool isAddedToCart = false;  // Styr färgändringen

    protected override async Task OnInitializedAsync()
    {
        product = await webshopApi.GetProductByIdAsync(id);
    }


    private async Task AddToCart()
    {
        if (product == null)
            return;

        var cartItems = await localStorage.GetItemAsync<List<Product>>("cart") ?? new List<Product>();

        cartItems.Add(product);
        await localStorage.SetItemAsync("cart", cartItems);

        // Ändra knappfärgen till grön
        isAddedToCart = true;
        StateHasChanged(); // 🛑 Se till att UI:t uppdateras direkt

        // Vänta 1 sekund
        await Task.Delay(1000);

        // Återställ knappen till röd
        isAddedToCart = false;
        StateHasChanged(); // 🛑 Uppdatera UI:t igen
    }
}

